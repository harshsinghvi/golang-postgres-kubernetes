---
apiVersion: apps/v1
kind: Deployment # Type of Kubernetes resource
metadata:
  name: go-todo-api # Name of the Kubernetes resource
spec:
  replicas: 1 # Number of pods to run at any given time
  selector:
    matchLabels:
      app: go-todo-api # This deployment applies to any Pods matching the specified label
  template: # This deployment will create a set of pods using the configurations in this template
    metadata:
      labels: # The labels that will be applied to all of the pods in this deployment
        app: go-todo-api
    spec: # Spec for the container which will run in the Pod
      imagePullSecrets:
        - name: dockerconfigjson-github-com
      # initContainers:
      #   - name: check-db-ready
      #     image: postgres:latest
      #     command: ['sh', '-c', 
      #       'until pg_isready -h $DB_HOST -p $DB_PORT; 
      #       do echo waiting for database; sleep 2; done;']
      #     envFrom: 
      #       - secretRef:
      #           name: app-secret
      containers:
        - name: go-todo-api
          image: ghcr.io/harshsinghvi/golang-postgres-kubernetes:latest
          imagePullPolicy: IfNotPresent # Always
          envFrom: 
            - secretRef:
                name: app-secret
          ports:
            - containerPort: 8080 # Should match the port number that the Go application listens on
          resources:
            limits:
              cpu: "500m"
            requests:
              cpu: "200m"
          livenessProbe: # To check the health of the Pod
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
          readinessProbe: # To check if the Pod is ready to serve traffic or not
            httpGet:
              path: /readiness
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            timeoutSeconds: 1

---
apiVersion: v1
kind: Service
metadata:
  name: golang-todo-api-service
spec:
  ports:
    - port: 8080
      targetPort: 8080
      # protocol: TCP
  type: LoadBalancer
  selector:
    app: go-todo-api

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: golang-todo-api-ingress
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip

    # alb.ingress.kubernetes.io/group.name: kube-alb-group  #Use this to share ALB among multiple ingresses. #CostEffective
    # alb.ingress.kubernetes.io/load-balancer-name: kube-alb  # give ALB a meaningfull name otherwise a random name is assigned by AWS.
    # alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:eu-west-1:XXXX:certificate/YYYY" # Get it by $ aws acm list-certificates
    # alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    # alb.ingress.kubernetes.io/ssl-redirect: "443"
spec:
  ingressClassName: alb
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: golang-todo-api-service
                port:
                  number: 8080

---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: go-todo-api-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: go-todo-api
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
